###############################################
#  console
###############################################

snippet clg "console.log" i
console.log('$1', $2);
endsnippet

snippet clw "console.warn" i
console.warn('$1', $2);
endsnippet

snippet cle "console.error" i
console.error('$1', $2);
endsnippet

###############################################
# props
###############################################

snippet rp "react prop" i
${1:prop}={${2:$1}}
endsnippet

snippet kv "key value" i
${1:prop}: ${2:$1}
endsnippet

snippet cl "className"
className="$1"
endsnippet

###############################################
#  tags
###############################################

snippet t "jsx tag" 
<${1:div}>$0</${1/(\w+).*/$1/}>
endsnippet

snippet tc "jsx tag closed (inline tag)"
<${1:div}/>
endsnippet

snippet tv "jsx tag visual" 
<${1:div}>${VISUAL}</${1/(\w+).*/$1/}>
endsnippet

###############################################
#  types
###############################################

snippet ty "type" 
type $0 = {
}
endsnippet


###############################################
#  functions
###############################################

snippet if "if statment" 
if ( $0 )=>{
}
endsnippet

snippet elif "else if statment" 
else if ( $0 )=>{
}
endsnippet

snippet el "else statment" 
else ( $0 )=>{
}
endsnippet

snippet c "const func" 
const $1 = ($0)=>{
}
endsnippet

snippet ca "const func async" 
const $1 = async ($0)=>{
}
endsnippet

snippet f "func" 
function $1 ($0){
}
endsnippet

snippet fa "func async" 
async function $1 ($0){
}
endsnippet
	

###############################################
# comments
###############################################

snippet todo "// TODO"
// TODO $0
endsnippet

snippet hc "header comment"
// ---------------------------------------------
// $0
// ---------------------------------------------
endsnippet


###############################################
#  space and jsx stuff
###############################################

snippet ws "white space" t
&nbsp;
endsnippet

###############################################
#  imports
###############################################

snippet i "import module" 
import ${1} from '${2:$1}';
endsnippet

snippet i1 "import spesific module" 
import ${1} from '../${2:$1}';
endsnippet

snippet i2 "import spesific module" 
import ${1} from '../../${2:$1}';
endsnippet

snippet i3 "import spesific module" 
import ${1} from '../../../${2:$1}';
endsnippet

snippet is "import spesific module" 
import { ${1} }  from '${2:$1}';
endsnippet

snippet is1 "import spesific module" 
import { ${1} }  from '../${2:$1}';
endsnippet

snippet is2 "import spesific module" 
import { ${1} }  from '../../${2:$1}';
endsnippet

snippet is3 "import spesific module" 
import { ${1} }  from '../../../${2:$1}';
endsnippet

###############################################
#  export 
###############################################

snippet ex "export module" 
export ${1} from '${2:$1}';
endsnippet

###############################################
# try/catch
###############################################

snippet tryc "Try Catch"
try{
	${1://something}
} catch(e){
	${2://something}
}
endsnippet

###############################################
# Set timout or interval
###############################################
snippet  stim "setTimout"
setTimeout(()=>{
	$1
},$2)
endsnippet

snippet  sint "SetInterval"
setInterval(()=>{
	$1
},$2)
endsnippet

###############################################
# Promise API
###############################################

snippet prom "promise"
new Promise(function(resolve, reject){
	${1://something}
})
endsnippet

snippet promf "promise function "
const $1 = async ($2)=>{
	return new Promise(function(resolve, reject){
		${3://something}
	})
}
endsnippet
	
###############################################
# JSON
###############################################

snippet jpar "JSON.parse()" i
JSON.parse($1)
endsnippet

snippet jstr "JSON.stringify" i
JSON.stringify($1)
endsnippet
	
###############################################
# copy
###############################################

snippet dcopy "deep copy" i 
JSON.parse(JSON.stringify($1))
endsnippet

###############################################
# react functional helpers
###############################################

snippet us.s "useState" w
const [$1, set${1/\w+\s*/\u$0/g}] = useState(${3:''})${0:;}
endsnippet

snippet us.e "useEffect" w
useEffect(() => {
  $1
})${0:;}
endsnippet

snippet us.ep "useEffect with props" w
useEffect(() => {
  $1
},[$2])${0:;}
endsnippet

snippet us.er "useEffect with return" w
useEffect(() => {
  $1
	return () => {
    $2
	};
})${0:;}
endsnippet

snippet us.sl "useSelector"
const $1 = useSelector((state)=>state.$2)
endsnippet
	

snippet us.c "useContext" w
const $1 = useContext($2)${0:;}
endsnippet

snippet us.r "useReducer" w
const [$1, dispatch] = useReducer($1Reducer, ${2:${VISUAL:initialState}})
const $1Reducer = (state, action) => {
	switch (action.type) {
		default:
			return state;
	}
}${0:;}
endsnippet

snippet us.cb "useCallback" w
useCallback(
	() => {
		$1
	},
	[$2],
)${0:;}
endsnippet

snippet us.m "useMemo" w
const $1 = useMemo(() => {
	$2
}, [$3])${0:;}
endsnippet

snippet us.rf "useRef" w
const $1 = useRef($2)${0:;}
endsnippet

